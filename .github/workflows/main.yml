name: CI

on:
  workflow_dispatch:
    branches:
      - main
      - develop
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
    branches:
      - main
env:
  TMPDIR: /tmp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
    - name: Install the conda environment
      run: conda env update -n base -f environment.yml
    # First dry-run on full workflow
    - name: Dry run
      run: snakemake --use-conda -j 4 --configfile .test/config/dry-run.yaml -n
    # Test cutadapt (10k reads/sample)
    - name: Cutadapt
      run: |
        snakemake --profile local --configfile .test/config/cutadapt.yaml -c 4 --notemp qc
    # Test all other preprocessing software except cutadapt (10k reads/sample)
    - name: Preprocess
      run: |
        rm -rf results report.html
        snakemake --use-conda -j 4 --configfile .test/config/preprocess.yaml -p qc
    # Run kraken for sample1 (paired-end) and sample4 (single-end) (10k reads/sample)
    - name: Kraken
      run: |
        snakemake --use-conda -j 4 --configfile .test/config/kraken.yaml -p results/kraken/sample1_1_pe.kreport results/kraken/sample4_1_se.kreport
        rm -rf results examples/data/sample*
    # Test annotations + normalizations with metaspades (100k reads/sample)
    - name: Annotation
      run: |
        #bash .test/scripts/prep_eggnog.sh
        #mkdir -p results/annotation/emapper-test
        #cp .test/data/emapper-out.tsv results/annotation/emapper-test/emapper-test.emapper.annotations
        #snakemake --config sample_list=.test/config/emapper-test.tsv --use-conda -j 2 --configfile .test/config/annotate.yaml -p results/annotation/emapper-test/{kos,modules,pathways,enzymes}.parsed.tsv
        snakemake --profile local --configfile .test/config/annotate.yaml -c 2 taxonomy
    # Test splitting protein fasta prior to running pfam_sca
    - name: Split
      run: |
        snakemake --use-conda -j 4 -rpk --configfile .test/config/annotate-split.yaml results/annotation/sample1/pfam.parsed.tsv
        rm -r results/assembly results/annotation examples/data/sample*
    # Test Metabat2 with Megahit (200k reads/sample)
    - name: Metabat
      run: |
        snakemake --use-conda -j 4 --configfile .test/config/metabat.yaml -p bin assemble
    - name: Set up checkm database
      uses: actions/cache@v2
      env:
        cache-name: checkm-db
      with:
        path: resources/checkm
        key: ${{ runner.os }}-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}
          ${{ runner.os }}-
    # Run kraken and produce final output reports (linux only) (10k reads/sample)
    - name: Kraken
      run: |
        snakemake --use-conda -j 4 --configfile .test/config/kraken.yaml --notemp -p classify
        rm -r examples/data/sample* results
    # Run binning including also checkm (200k reads/sample)
    - name: Binning
      run: |
        snakemake --use-conda -j 4 --configfile .test/config/binning.yaml -p assemble bin
